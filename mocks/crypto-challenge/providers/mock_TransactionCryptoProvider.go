// Code generated by mockery v2.42.1. DO NOT EDIT.

package providers

import (
	entities "crypto-challenge/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionCryptoProvider is an autogenerated mock type for the TransactionCryptoProvider type
type MockTransactionCryptoProvider struct {
	mock.Mock
}

type MockTransactionCryptoProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionCryptoProvider) EXPECT() *MockTransactionCryptoProvider_Expecter {
	return &MockTransactionCryptoProvider_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: _a0
func (_m *MockTransactionCryptoProvider) Decrypt(_a0 *entities.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionCryptoProvider_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockTransactionCryptoProvider_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - _a0 *entities.Transaction
func (_e *MockTransactionCryptoProvider_Expecter) Decrypt(_a0 interface{}) *MockTransactionCryptoProvider_Decrypt_Call {
	return &MockTransactionCryptoProvider_Decrypt_Call{Call: _e.mock.On("Decrypt", _a0)}
}

func (_c *MockTransactionCryptoProvider_Decrypt_Call) Run(run func(_a0 *entities.Transaction)) *MockTransactionCryptoProvider_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Transaction))
	})
	return _c
}

func (_c *MockTransactionCryptoProvider_Decrypt_Call) Return(_a0 error) *MockTransactionCryptoProvider_Decrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionCryptoProvider_Decrypt_Call) RunAndReturn(run func(*entities.Transaction) error) *MockTransactionCryptoProvider_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: _a0
func (_m *MockTransactionCryptoProvider) Encrypt(_a0 *entities.Transaction) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionCryptoProvider_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockTransactionCryptoProvider_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - _a0 *entities.Transaction
func (_e *MockTransactionCryptoProvider_Expecter) Encrypt(_a0 interface{}) *MockTransactionCryptoProvider_Encrypt_Call {
	return &MockTransactionCryptoProvider_Encrypt_Call{Call: _e.mock.On("Encrypt", _a0)}
}

func (_c *MockTransactionCryptoProvider_Encrypt_Call) Run(run func(_a0 *entities.Transaction)) *MockTransactionCryptoProvider_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Transaction))
	})
	return _c
}

func (_c *MockTransactionCryptoProvider_Encrypt_Call) Return(_a0 error) *MockTransactionCryptoProvider_Encrypt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionCryptoProvider_Encrypt_Call) RunAndReturn(run func(*entities.Transaction) error) *MockTransactionCryptoProvider_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionCryptoProvider creates a new instance of MockTransactionCryptoProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionCryptoProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionCryptoProvider {
	mock := &MockTransactionCryptoProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
