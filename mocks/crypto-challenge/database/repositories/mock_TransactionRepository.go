// Code generated by mockery v2.42.1. DO NOT EDIT.

package repositories

import (
	entities "crypto-challenge/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: newTransaction
func (_m *MockTransactionRepository) Create(newTransaction *entities.Transaction) error {
	ret := _m.Called(newTransaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction) error); ok {
		r0 = rf(newTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - newTransaction *entities.Transaction
func (_e *MockTransactionRepository_Expecter) Create(newTransaction interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", newTransaction)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(newTransaction *entities.Transaction)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(_a0 error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(*entities.Transaction) error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: idToDelete
func (_m *MockTransactionRepository) DeleteByID(idToDelete string) error {
	ret := _m.Called(idToDelete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idToDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockTransactionRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - idToDelete string
func (_e *MockTransactionRepository_Expecter) DeleteByID(idToDelete interface{}) *MockTransactionRepository_DeleteByID_Call {
	return &MockTransactionRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", idToDelete)}
}

func (_c *MockTransactionRepository_DeleteByID_Call) Run(run func(idToDelete string)) *MockTransactionRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransactionRepository_DeleteByID_Call) Return(_a0 error) *MockTransactionRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_DeleteByID_Call) RunAndReturn(run func(string) error) *MockTransactionRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockTransactionRepository) FindAll() ([]*entities.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockTransactionRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockTransactionRepository_Expecter) FindAll() *MockTransactionRepository_FindAll_Call {
	return &MockTransactionRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockTransactionRepository_FindAll_Call) Run(run func()) *MockTransactionRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionRepository_FindAll_Call) Return(_a0 []*entities.Transaction, _a1 error) *MockTransactionRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_FindAll_Call) RunAndReturn(run func() ([]*entities.Transaction, error)) *MockTransactionRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: idToSearch
func (_m *MockTransactionRepository) FindByID(idToSearch string) (*entities.Transaction, error) {
	ret := _m.Called(idToSearch)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Transaction, error)); ok {
		return rf(idToSearch)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Transaction); ok {
		r0 = rf(idToSearch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idToSearch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockTransactionRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - idToSearch string
func (_e *MockTransactionRepository_Expecter) FindByID(idToSearch interface{}) *MockTransactionRepository_FindByID_Call {
	return &MockTransactionRepository_FindByID_Call{Call: _e.mock.On("FindByID", idToSearch)}
}

func (_c *MockTransactionRepository_FindByID_Call) Run(run func(idToSearch string)) *MockTransactionRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransactionRepository_FindByID_Call) Return(_a0 *entities.Transaction, _a1 error) *MockTransactionRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_FindByID_Call) RunAndReturn(run func(string) (*entities.Transaction, error)) *MockTransactionRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: updatedTransaction
func (_m *MockTransactionRepository) UpdateByID(updatedTransaction *entities.Transaction) error {
	ret := _m.Called(updatedTransaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Transaction) error); ok {
		r0 = rf(updatedTransaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockTransactionRepository_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - updatedTransaction *entities.Transaction
func (_e *MockTransactionRepository_Expecter) UpdateByID(updatedTransaction interface{}) *MockTransactionRepository_UpdateByID_Call {
	return &MockTransactionRepository_UpdateByID_Call{Call: _e.mock.On("UpdateByID", updatedTransaction)}
}

func (_c *MockTransactionRepository_UpdateByID_Call) Run(run func(updatedTransaction *entities.Transaction)) *MockTransactionRepository_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_UpdateByID_Call) Return(_a0 error) *MockTransactionRepository_UpdateByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_UpdateByID_Call) RunAndReturn(run func(*entities.Transaction) error) *MockTransactionRepository_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
